import { useMemo, useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import drillSvg from "../assets/drillOld.png";
import { getRigById } from "../api/rigs";
import { useEdgeWithAttributes } from "../hooks/useEdges";
import { useEdgeBlocks } from "../hooks/useBlocks";
import type { Rig } from "../types/rig";
import { polygonPercentToSvgPoints } from "../utils/polygonUtils";

import './MainPage.css';

import { useTagsData } from "../hooks/useTagsData";
import type { TagData } from "../types/tag";


type SegmentStatus = 'ok' | 'error' | 'warning';

// –°–µ–≥–º–µ–Ω—Ç—ã –∑–∞–¥–∞–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (viewBox 1010x1024)
// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã –ø–æ–¥ –≤–∏–¥–∏–º—ã–µ –∫–æ–Ω—Ç—É—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
const SEGMENTS: { id: string; name: string; href: string; polygon: string }[] = [
	// –ë–ª–æ–∫ 1 ‚Äî —Å–∞–º—ã–π –ª–µ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	{ 
        id: "1", 
        name: "–ö–¢–£/–ö–†–£", 
        href: "/ktu/:rigId", 
        polygon: "14.2% 73.1%, 25% 70.67%, 32.7% 73.99%, 32.9% 80.2%, 21.5% 83.2%, 14.5% 79.5%" 
    },
	// –ë–ª–æ–∫ 2 ‚Äî —Å—Ä–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	{ 
		id: "2",
		name: "–ù–∞—Å–æ—Å–Ω—ã–π –±–ª–æ–∫",
		href: "/pumpblock/:rigId",
		polygon: "26.55% 70.4%, 35.999% 68.4%, 43.7% 71.1%, 43.8% 77%, 34.5% 79.6%, 34.2% 73.7%"
	},
	// –ë–ª–æ–∫ 3 ‚Äî –ø—Ä–∞–≤—ã–π –º–∞–ª—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	{ 
		id: "3",
		name: "–¶–∏—Ä–∫—É–ª—è—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
		href: "/charts/separate",
		polygon: "37.2% 68.1%, 45% 66.4%, 53.3% 68.7%, 53.3% 74.3%, 45.1% 76.8%, 44.9% 70.8%"
	},
	// –ë–ª–æ–∫ 4 ‚Äî –ø–ª–æ—â–∞–¥–∫–∞ —É –æ—Å–Ω–æ–≤–∞–Ω–∏—è –≤—ã—à–∫–∏
	{ 
		id: "4",
		name: "–õ–µ–±–µ–¥–æ—á–Ω—ã–π –±–ª–æ–∫",
		href: "/charts/separate",
		polygon: "41.5% 64.99%, 60.5% 60.9%, 73.5% 63.7%, 79.2% 64.8%, 84.5% 66%, 66.5% 71.5%"
	},
];

const isTagValueOK = (tag: TagData): boolean => {
    const { value, min, max, unit_of_measurement } = tag;

    // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω (min/max –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–∑ API)
    if (unit_of_measurement !== 'bool' && typeof value === 'number' && min !== undefined && max !== undefined) {
        return value >= min && value <= max;
    }

    // –î–ª—è —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —Ç–µ–≥–æ–≤ (bool –∏–ª–∏ —è–≤–Ω–æ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–∫ status): 1/true = OK
    const isStatusTag = unit_of_measurement === 'bool' || tag.customization?.some(c => c.key === 'isStatus');
    if (isStatusTag) {
        // –°—á–∏—Ç–∞–µ–º 1 –∏–ª–∏ true –∫–∞–∫ OK
        return value === 1 || value === true || String(value).toLowerCase() === 'true'; 
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç min/max –∏–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç–∞—Ç—É—Å, —Å—á–∏—Ç–∞–µ–º OK
    return true;
};

export default function MainPage() {
	const params = useParams();
	const navigate = useNavigate();
	const rigId = params.rigId || "14820";
	const [rig, setRig] = useState<Rig | null>(null);
	const [hovered, setHovered] = useState<string | null>(null);

	const { tagData, error: tagsError } = useTagsData(); 

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º rigId –∫–∞–∫ edge_key –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
	const edgeKey = `${rigId}`;
	const { error: edgeError } = useEdgeWithAttributes(edgeKey);
	const { blocks } = useEdgeBlocks(edgeKey);

	const sortedTagData = useMemo(() => {
        if (!tagData) return null;
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞, —á—Ç–æ–±—ã –Ω–µ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π (–µ—Å–ª–∏ useTagsData –µ—â–µ –Ω–µ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç)
        // –ï—Å–ª–∏ useTagsData —É–∂–µ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç, —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
        return [...tagData].sort((a: TagData, b: TagData) => a.name.localeCompare(b.name));
    }, [tagData]);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º useMemo –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    const segmentsWithStatus = useMemo(() => {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Edge/Blocks
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–∏—Ç–∞—Ü–∏—é
        return SEGMENTS.map(segment => {
            let status: SegmentStatus = 'ok';
            if (segment.id === '2') {
                status = 'error'; // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—Å–æ—Å–Ω—ã–π –±–ª–æ–∫ –≤ –∞–≤–∞—Ä–∏–∏
            } else if (segment.id === '3') {
                status = 'warning'; // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥—ä–µ–º–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            } else if (segment.id === '1') {
                status = 'ok'; // –ö–¢–£ –≤ –Ω–æ—Ä–º–µ
            }
            return {
                ...segment,
                status,
                svgPoints: polygonPercentToSvgPoints(segment.polygon, 1010, 1024) 
            };
        });
    }, [rigId]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç rigId


	// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "unknown")
    // const getTagStatusClass = (value: any): string => {
    //     // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    //     // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∏–º–µ–Ω —Ç–µ–≥–æ–≤
    //     if (typeof value === 'number') {
    //         if (value > 100) return 'error'; // –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ
    //         if (value > 50) return 'warning'; // –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–µ
    //         if (value > 0) return 'ok'; // –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
    //     }
    //     // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –¥–ª—è –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    //     return 'unknown';
    // };

	useEffect(() => {
		getRigById(rigId).then((r) => setRig(r ?? null));
	}, [rigId]);

    return (
        <div className="main-page-container">
            <h1 className="page-title">{rig?.name || '–ë—É—Ä–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞'}</h1>

            <div className="main-content-grid">
                
                {/* --- 1. –õ–ï–í–´–ô –ë–õ–û–ö (–°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤/–ö–Ω–æ–ø–∫–∏) --- */}
                {/* üí° –ü–ï–†–ï–ú–ï–©–ï–ù–ù–´–ô –ë–õ–û–ö –ö–ù–û–ü–û–ö */}
                <div className="segments-list-wrapper">
                    <div className="segments-list">
                        {/* –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API (–±–ª–æ–∫–∏), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö */}
                        {blocks.length > 0 ? (
                            blocks.map((block, index) => (
                                <button
                                    key={block.block_name}
                                    className={`seg-item ${hovered === block.block_name ? 'hovered' : ''}`}
                                    onMouseEnter={() => setHovered(block.block_name)}
                                    onMouseLeave={() => setHovered(null)}
                                    onClick={() => navigate(`/charts?mode=separate&rig=${rigId}&block=${block.block_name}`)}
                                >
                                    <span className="seg-dot">{index + 1}</span>
                                    {block.description || block.block_name}
                                </button>
                            ))
                        ) : (
                            // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                            segmentsWithStatus.map((s) => (
                                <button
                                    key={s.id}
                                    className={`seg-item status-${s.status} ${hovered === s.id ? 'hovered' : ''}`}
                                    onMouseEnter={() => setHovered(s.id)}
                                    onMouseLeave={() => setHovered(null)}
                                    onClick={() => {
                                        if (s.href.includes(':rigId')) {
                                            navigate(s.href.replace(':rigId', rigId || ''));
                                        } else if (s.href.startsWith('/charts')) {
                                            navigate(`/charts?mode=separate&rig=${rigId}&block=${s.id}`);
                                        } else {
                                            navigate(s.href);
                                        }
                                    }}
                                >
                                    <span className="seg-dot">{s.id}</span>
                                    {s.name}
                                </button>
                            ))
                        )}
						<button
                            key="archive-data" 
                            className="seg-item archive-button" 
                            onClick={() => {
                                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç /rigs/:rigId/archive
                                navigate(`/rigs/${rigId}/archive`); 
                            }} 
                            // –î–æ–±–∞–≤–∏–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
                            style={{ 
                                marginTop: '15px', 
                                marginBottom: '15px', /* –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã */
                                color: 'var(--color-accent-blue)', 
                                fontWeight: 600,
                                border: '1px solid var(--color-accent-blue)', /* –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ–º –∞–∫—Ü–µ–Ω—Ç–æ–º */
                                background: 'rgba(167, 139, 250, 0.1)'
                            }}
                        >
                            <i className="pi pi-chart-line" style={{ marginRight: '10px' }} />
                            –ê—Ä—Ö–∏–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                        </button>
						<button
							key="back-to-rigs" // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
							className="seg-item back-button" // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å —Å–µ–≥–º–µ–Ω—Ç–∞
							onClick={() => {
								navigate('/'); 
							}} 
						>
							<i className="pi pi-arrow-left" style={{ marginRight: '10px' }} />
							–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –±—É—Ä–æ–≤—ã—Ö
						</button>
                    </div>
                </div>


                {/* --- 2. –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô –ë–õ–û–ö (–ö–∞—Ä—Ç–∞) --- */}
                <div className="map-container">
                    
                    {/* SVG-–∫–∞—Ä—Ç–∞ */}
                    <svg
                        className="map-svg"
                        viewBox="0 0 1010 1024"
                        version="1.1"
                        xmlns="http://www.w3.org/2000/svg"
                        xmlnsXlink="http://www.w3.org/1999/xlink"
                    >
                        {/* –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ */}
                        <image 
                            xlinkHref={drillSvg} 
                            x="0" 
                            y="0" 
                            width="1010" 
                            height="1024" 
                        />

                        {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª–∏–≥–æ–Ω—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
                        {segmentsWithStatus.map((segment) => (
                            <polygon
                                key={segment.id}
                                points={segment.svgPoints} 
                                className={`seg-polygon status-${segment.status} ${
                                    hovered === segment.id ? 'hovered' : ''
                                }`}
                                onMouseEnter={() => setHovered(segment.id)}
                                onMouseLeave={() => setHovered(null)}
                                onClick={() => {
                                    if (segment.href.includes(':rigId')) {
                                        navigate(segment.href.replace(':rigId', rigId || ''));
                                    } else if (segment.href.startsWith('/charts')) {
                                        navigate(`/charts?mode=separate&rig=${rigId}&block=${segment.id}`);
                                    } else {
                                        navigate(segment.href);
                                    }
                                }}
                            />
                        ))}
                    </svg>
                </div>

                <div className="edge-status-section">
                    {edgeError && (
                        <div className="edge-error">
                            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö Edge: {edgeError}
                        </div>
                    )}
                    
                    <h2 style={{ color: 'var(--color-accent-blue)', fontSize: '1.2em', marginBottom: '10px' }}>
                        –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    </h2>
                    {tagsError && (
                        <div className="edge-error">
                            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤: {tagsError}
                        </div>
                    )}
                    
                    {/* üí° –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –î–ê–ù–ù–´–• –¢–ï–ì–û–í –í –í–ò–î–ï –ë–õ–û–ö–û–í */}
                    {sortedTagData && (
                        <div className="tag-data-grid-container">
                            <div className="tag-card-grid-small">
                                {sortedTagData.map(tag => {
                                    const isOK = isTagValueOK(tag);
                                    const statusClass = isOK ? 'status-ok' : 'status-error';
                                    
                                    // üí° –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–≥ –±—É–ª–µ–≤—ã–º
                                    const isBooleanTag = tag.unit_of_measurement === 'bool';

                                    return (
                                        <div 
                                            key={tag.name} 
                                            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å-–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –±—É–ª–µ–≤—ã—Ö —Ç–µ–≥–æ–≤
                                            className={`tag-card-small ${statusClass} ${isBooleanTag ? 'tag-card-bool' : ''}`}
                                        >
                                            <div className="tag-card-title-small">{tag.name}</div>
                                            
                                            {/* üí° –£–°–õ–û–í–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï: –†–µ–Ω–¥–µ—Ä–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–±—É–ª–µ–≤—ã—Ö —Ç–µ–≥–æ–≤ */}
                                            {!isBooleanTag && (
                                                <div className="tag-card-value-small">
                                                    {String(tag.value)}
                                                    {tag.unit_of_measurement && (
                                                        <span className="tag-card-unit-small">
                                                            {tag.unit_of_measurement}
                                                        </span>
                                                    )}
                                                </div>
                                            )}
                                        </div>
                                    );
                                })}
                            </div>
                        </div>
                    )}
                </div>

            </div>
        </div>
    );
}
