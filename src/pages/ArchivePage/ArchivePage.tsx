import { useMemo, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import ReactECharts from 'echarts-for-react'; 
import { Button } from 'primereact/button'; 
import { useTagHistory } from '../../hooks/useTagHistory';
import type { TagHistoryList } from '../../types/tag'; 

import ActionLogTable from '../../components/ActionLogTable/ActionLogTable'; 
import { MOCK_ACTION_LOG } from '../../types/tag';

const ACCENT_COLOR_1 = '#a78bfa';
const ACCENT_COLOR_2 = '#34D399';
const WARN_COLOR = '#F87171';

const TagHistoryChart = ({ tagsData }: { tagsData: TagHistoryList }) => {

    const chartOption = useMemo(() => {
        if (tagsData.length === 0) return {};
        
        // --- 1. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
        // X-–æ—Å—å: –±–µ—Ä–µ–º —Ç–∞–π–º—Å—Ç–µ–º–ø—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–≥–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—è –∏—Ö –∫–∞–∫ –í—Ä–µ–º—è
        // const timestamps = tagsData[0].history
        //     .map(item => new Date(item.timestamp).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit', second: '2-digit' }))
        //     .reverse(); // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, —Ç.–∫. API –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç –Ω–æ–≤–æ–≥–æ –∫ —Å—Ç–∞—Ä–æ–º—É

        // –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –¥–ª—è —Å–µ—Ä–∏–π
        const colors = [ACCENT_COLOR_1, ACCENT_COLOR_2, '#ffc700', '#00bcd4'];

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å–¥–≤–∏–≥–∞ –æ–∫–Ω–∞
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ—á–µ–∫ –º—ã —Ö–æ—Ç–∏–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100)
        //const VISIBLE_POINTS_COUNT = 100; 
        // const dataLength = timestamps.length;
        // // –ò–Ω–¥–µ–∫—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, —á—Ç–æ–±—ã –≤ –æ–∫–Ω–µ –±—ã–ª–æ VISIBLE_POINTS_COUNT —Ç–æ—á–µ–∫
        // const startValueIndex = dataLength > VISIBLE_POINTS_COUNT 
        //                         ? dataLength - VISIBLE_POINTS_COUNT 
        //                         : 0; 

        // --- 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–∏–π –¥–∞–Ω–Ω—ã—Ö ---
        const transformedSeriesData = tagsData.map((tag, index) => {
            const color = colors[index % colors.length];

            // üí° –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ [timestamp_ms, value]
            const data = tag.history.map(item => {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ Unix-—Ç–∞–π–º—Å—Ç–∞–º–ø (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)
                const timestamp = new Date(item.timestamp).getTime(); 
                return [timestamp, item.value];
            }).reverse(); // –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º (left-to-right)

            return {
                name: tag.name,
                type: 'line',
                smooth: true,
                // data: tag.history.map(item => item.value).reverse(), // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                data: data,
                yAxisIndex: 0,
                showSymbol: false, 
                hoverAnimation: false,
                itemStyle: { color: color },
                lineStyle: {
                    width: 3,
                    shadowColor: color,
                    shadowBlur: 8, 
                    opacity: 0.8
                },
                areaStyle: {
                    color: {
                        type: 'linear', x: 0, y: 0, x2: 0, y2: 1, 
                        colorStops: [{ offset: 0, color: color }, { offset: 1, color: 'transparent' }]
                    }, 
                    opacity: 0.15
                },
            };
        });

        // --- 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Y-–æ—Å–∏ ---
        let globalMin = Math.min(...tagsData.map(tag => tag.min));
        let globalMax = Math.max(...tagsData.map(tag => tag.max));
        const padding = (globalMax - globalMin) * 0.1;
        globalMin = Math.floor(globalMin - padding);
        globalMax = Math.ceil(globalMax + padding);

        // --- 3. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø—Ü–∏—è ECharts ---
        return {
            backgroundColor: 'transparent',
            animation: true, 
            // üí° –ü–õ–ê–í–ù–´–ô –ü–ï–†–ï–•–û–î: –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            animationDurationUpdate: 500, 
            title: {
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
                // text: `–î–∏–Ω–∞–º–∏–∫–∞: `, -- –ó–∞–≥–æ–ª–æ–≤–æ–∫
                // left: 'left',
                // textStyle: { color: ACCENT_COLOR_1, fontWeight: 'bold', fontSize: 18 }
            },
            tooltip: {
                trigger: 'axis',
                backgroundColor: 'rgba(42, 26, 58, 0.9)',
                borderColor: ACCENT_COLOR_1,
                borderWidth: 1,
                textStyle: { color: 'var(--color-text-light)' },
                axisPointer: {
                    // type: 'cross',
                    // label: {
                    //     backgroundColor: '#6a7985'
                    // }
                    type: 'line',
                    lineStyle: { 
                        color: ACCENT_COLOR_1,
                        type: 'dashed'
                    }
                },
                // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è
                formatter: function (params: any) {
                    const time = new Date(params[0].value[0]).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                    let result = `<div style="color: #fff; border-bottom: 1px solid rgba(255,255,255,0.2); padding-bottom: 5px; margin-bottom: 5px;">${time}</div>`;
                    
                    params.forEach((item: any) => {
                        // item.seriesName - –∏–º—è —Ç–µ–≥–∞, item.value[1] - –∑–Ω–∞—á–µ–Ω–∏–µ
                        result += `<div style="color: ${item.color};">
                            ${item.seriesName}: 
                            <strong>${item.value[1].toFixed(2)}</strong>
                        </div>`;
                    });
                    return result;
                }
            },
            legend: {
                data: tagsData.map(t => t.name),
                bottom: '0', // –õ–µ–≥–µ–Ω–¥–∞ –±—É–¥–µ—Ç —É —Å–∞–º–æ–≥–æ –Ω–∏–∑–∞
                left: 'center', // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
                textStyle: { color: 'var(--color-text-light)' },
                itemGap: 20 // –£–≤–µ–ª–∏—á–∏–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            },
            grid: { left: '3%', right: '10%', bottom: '20%', containLabel: true },
            // DATA ZOOM –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞
            dataZoom: [
                // 1. –ó—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ X (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ: –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏)
                {
                    type: 'inside', 
                    xAxisIndex: [0],
                    start: 80, 
                    end: 100,
                    filterMode: 'none',
                },
                // 2. –ó—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ Y (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ: –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏)
                {
                    type: 'inside', 
                    yAxisIndex: [0], // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ Y-–æ—Å–∏
                    start: 0, 
                    end: 100 
                },
                // 3. –°–ª–∞–π–¥–µ—Ä –ø–æ X (–≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–æ–ª–∑—É–Ω–æ–∫)
                {
                    type: 'slider', 
                    show: true,
                    xAxisIndex: [0],
                    height: 20, 
                    top: 10, 
                    // startValue: startValueIndex, 
                    textStyle: {
                        color: 'var(--color-text-light)'
                    },
                    fillerColor: 'rgba(167, 139, 250, 0.3)', 
                    handleStyle: {
                        color: ACCENT_COLOR_1 
                    }
                }
                // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ú—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä –ø–æ Y, —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ. 
                // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑—É–º (–∫–æ–ª–µ—Å–æ–º –º—ã—à–∏) –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è Y.
            ],
            xAxis: {
                // type: 'category',
                // data: timestamps,
                // axisLabel: { color: ACCENT_COLOR_1 },
                // axisLine: { lineStyle: { color: 'var(--color-text-light)' } },
                // splitLine: { show: false },
                type: 'time', // –ú–µ–Ω—è–µ–º –Ω–∞ 'time'
                axisLabel: {
                    formatter: (value: number) => {
                        // value - —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π —Ç–∞–π–º—Å—Ç–∞–º–ø
                        return new Date(value).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                    },
                    color: ACCENT_COLOR_1,
                },
                splitLine: { show: false },
                axisLine: { lineStyle: { color: ACCENT_COLOR_1 } }
            },
            yAxis: {
                // type: 'value',
                // // name: `–ó–Ω–∞—á–µ–Ω–∏–µ`,
                // min: globalMin,
                // max: globalMax,
                // axisLabel: { color: ACCENT_COLOR_1 },
                // axisLine: { lineStyle: { color: 'var(--color-text-light)' } },
                // splitLine: { lineStyle: { color: '#475569', opacity: 0.3 } },
                type: 'value',
                min: globalMin,
                max: globalMax,
                axisLabel: {
                    formatter: '{value}',
                    color: ACCENT_COLOR_2
                },
                splitLine: {
                    lineStyle: {
                        color: 'rgba(255, 255, 255, 0.1)'
                    }
                },
                axisLine: { lineStyle: { color: ACCENT_COLOR_2 } }
            },
            series: transformedSeriesData
        };
    }, [tagsData]);

    return (
        <div style={{ width: '100%', height: 700, padding: '20px', borderRadius: '16px', background: 'var(--color-card-dark)', boxShadow: '0 0 15px rgba(167, 139, 250, 0.2)' }}>
            <ReactECharts 
                option={chartOption} 
                style={{ height: '100%', width: '100%' }}
                notMerge={true} // –í–∞–∂–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏, –∫–æ–≥–¥–∞ –º–µ–Ω—è–µ—Ç—Å—è —Ç–∏–ø –æ—Å–∏
                opts={{ renderer: 'canvas' }}
            />
        </div>
    );
};

// --- –ö–û–ú–ü–û–ù–ï–ù–¢ –°–¢–†–ê–ù–ò–¶–´ –ê–†–•–ò–í–ê ---
export default function ArchivePage() {
    const { rigId } = useParams<{ rigId: string }>();
    const navigate = useNavigate();
    // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const [isRealTime, setIsRealTime] = useState(true);
    // –ò–°–ü–û–õ–¨–ó–£–ï–ú –•–£–ö —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º isRealTime
    const { tagHistoryData, loading, error } = useTagHistory(isRealTime);

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    const toggleRealTime = () => {
        setIsRealTime(prev => !prev);
    };

    const buttonIcon = isRealTime ? 'pi pi-pause' : 'pi pi-play';
    const buttonLabel = isRealTime ? '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å';

    return (
        <div className="main-page-container">
            <div style={{ maxWidth: '1400px', margin: '0 auto', padding: '20px' }}>
                
                <div className="bypass-controls-header" style={{ borderBottom: '1px solid #475569', paddingBottom: '15px', marginBottom: '30px' }}>
                    <Button 
                        icon="pi pi-arrow-left"
                        label={`–ù–∞–∑–∞–¥ –∫ –ë—É—Ä–æ–≤–æ–π ${rigId}`}
                        severity="secondary"
                        onClick={() => navigate(`/rigs/${rigId}`)}
                        className="mb-4 back-button-custom"
                        style={{ color: 'var(--color-text-light)' }}
                    />
                    <Button
                        icon={buttonIcon}
                        label={buttonLabel}
                        severity={isRealTime ? 'danger' : 'success'} // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–∞—É–∑—ã, –∑–µ–ª–µ–Ω—ã–π –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        onClick={toggleRealTime}
                        className="mb-4 back-button-custom"
                        style={{ color: 'var(--color-text-light)' }}
                    />
                </div>
                
                <h1 style={{ color: 'var(--color-accent-blue)', marginBottom: '30px' }}>
                    –ê—Ä—Ö–∏–≤ –¥–∞–Ω–Ω—ã—Ö –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –ë—É—Ä–æ–≤–æ–π #{rigId}
                </h1>

                <div className="charts-grid" style={{ 
                    display: 'grid', 
                    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã
                    gridTemplateColumns: tagHistoryData && tagHistoryData.length > 0 ? '2fr 1fr' : '1fr',
                    gap: '30px' 
                }}></div>

                <div className="charts-grid" style={{ 
                    display: 'grid', 
                    gridTemplateColumns: '1fr',
                    gap: '30px' 
                }}>

                    {error && (
                        <div className="edge-error" style={{ color: WARN_COLOR, padding: '20px', background: 'var(--color-card-dark)', borderRadius: '16px' }}>
                            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {error}
                        </div>
                    )}
                    
                    {/* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –∏ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ */}
                    {tagHistoryData && tagHistoryData.length > 0 && (
                        <TagHistoryChart tagsData={tagHistoryData} />
                    )}

                    {/* –ë–õ–û–ö 2: –ñ–£–†–ù–ê–õ –î–ï–ô–°–¢–í–ò–ô */}
                    <div className="action-log-container">
                        <ActionLogTable data={MOCK_ACTION_LOG} />
                    </div>
                    
                    {tagHistoryData && tagHistoryData.length === 0 && !loading && (
                        <div style={{ color: 'var(--color-text-light)', padding: '20px', background: 'var(--color-card-dark)', borderRadius: '16px' }}>
                            –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}