import React, { useRef } from 'react';
import { Doughnut } from 'react-chartjs-2'; 
import { 
    Chart as ChartJS, 
    ArcElement, 
    Tooltip, 
    Legend, 
    type ScriptableContext,
    type ChartData as CoreChartData,
    type ChartDataset
} from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend);

interface GaugeChartProps {
    label: string;
    value: number;
    max: number;
}

type DoughnutContext = ScriptableContext<'doughnut'>;

// üí° 1. –î–æ–±–∞–≤–ª—è–µ–º React.memo –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è
const GaugeChart: React.FC<GaugeChartProps> = React.memo(({ label, value, max }) => {
    const chartRef = useRef<ChartJS<'doughnut', number[], string> | null>(null);
    
    // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ì–†–ê–î–ò–ï–ù–¢–ê (–∫–∞–∫ –≤ –≤–∞—à–µ–º —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ, –Ω–æ —Å —è–≤–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏)
    const getGradient = (chart: ChartJS) => {
        const { ctx, chartArea } = chart;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º chartArea –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
        if (!chartArea) return '#34D399';
        
        // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ (–æ—Ç chartArea.left –¥–æ chartArea.right)
        const gradient = ctx.createLinearGradient(chartArea.left, 0, chartArea.right, 0); 
        
        // –í–∞—à–∏ —Å—Ç–æ–ø—ã –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        gradient.addColorStop(0, '#34D399');   // –õ–µ–≤—ã–π —Ü–≤–µ—Ç (–∑–µ–ª–µ–Ω—ã–π)
        gradient.addColorStop(0.3, '#F5CD19');  // –°–µ—Ä–µ–¥–∏–Ω–∞ (–∂–µ–ª—Ç—ã–π)
        gradient.addColorStop(0.7, '#F87171');  // –ü—Ä–∞–≤—ã–π —Ü–≤–µ—Ç (–∫—Ä–∞—Å–Ω—ã–π)
        
        return gradient;
    };

    // üí° –î–∞–Ω–Ω—ã–µ –¥–ª—è Doughnut Chart
    const data: CoreChartData<'doughnut'> = {
        labels: [label],
        datasets: [{
            data: [value, max - value], 
            backgroundColor: (context: DoughnutContext) => {
                const chart = context.chart as ChartJS;
                if (chart) {
                    // –ö—É—Å–æ–∫ 0 (–∑–Ω–∞—á–µ–Ω–∏–µ) - –ì–†–ê–î–ò–ï–ù–¢, –ö—É—Å–æ–∫ 1 (–æ—Å—Ç–∞—Ç–æ–∫) - —Å–µ—Ä—ã–π —Ñ–æ–Ω
                    return [getGradient(chart), 'rgba(0, 0, 0, 0.1)']; 
                }
                return ['rgba(0, 0, 0, 0.1)'];
            },
            borderWidth: 0,
        } as ChartDataset<'doughnut'>], 
    };

    // üí° –û–ø—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É–∫—Ä—É–≥–∞
    const options = {
        responsive: true,
        maintainAspectRatio: false, // –ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —á–µ—Ä–µ–∑ div
        cutout: '70%',      // –¢–æ–ª—â–∏–Ω–∞ –∫–æ–ª—å—Ü–∞
        circumference: 180,  // –ü–æ–ª—É–∫—Ä—É–≥
        rotation: -90,       // –ü–æ–≤–æ—Ä–æ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∏–Ω–∞–ª—Å—è —Å–Ω–∏–∑—É
        plugins: {
            tooltip: { enabled: false },
            legend: { display: false },
        },
    };

    return (
        // ‚úÖ 2. –§–ò–ö–° –†–ê–ó–ú–ï–†–ê: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        <div style={{ height: '200px', width: '200px' }}> 
            <Doughnut 
                ref={chartRef as React.LegacyRef<any>} 
                data={data} 
                options={options} 
            />
        </div>
    );
});

export default GaugeChart;